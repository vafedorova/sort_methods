Я провела анализ, в котором сравнила результат различных сортировок на 4-х типах массивов: 
1. состоящий из рандомных чисел 
2. уже отсортированный  
3. отсортированный и далее инвертированный 
4. отсортированный на 90%, те 10% чисел от массива заполняется рандомно

Тестировала я каждый метод по 10 раз и брала средний результат по времени, а также использовала встроенную оптимизацию

Сортировки, я разделила на группы по сложности алгоритмов: 
	1 группа сортировки, которые выполняют работу со сложностью в n^2, протестировала на массивах размерностью (10)^4:
1. пузырьковая сортировка 
2. Пузырьковая сортировка с выходом
3. Сортировка выбором
4. Сортировка вставками
	2 группа: сортировки, которые выполняют работу за сложность log2(n), протестировала на массивах размерностью (10)^7: 
1. Встроенная сортировка
2. Встроенная сортировка stable
3. Сортировка слиянием 
4. Быстрая сортировка с выбором среднего элемента 
5. Быстрая сортировка с выбором медианы 
6. Сортировка кучей 

На основе сравнения я получила такие результаты: 
varvara@MacBook-Air-Varvara sort_methods % ./main
bubble_sort:
total_time randomized: 0.0336952
total_time sorted: 0.0192609
total_time inversed: 0.0194061
total_time nearly_sorted: 0.0242219

bubble_sort_opt:
total_time randomized: 0.0311707
total_time sorted: 4.7e-06
total_time inversed: 0.0178188
total_time nearly_sorted: 0.023083

selection_sort:
total_time randomized: 0.0211766
total_time sorted: 0.0207207
total_time inversed: 0.0206306
total_time nearly_sorted: 0.0205701

insertion_sort:
total_time randomized: 0.0124064
total_time sorted: 5.2e-06
total_time inversed: 0.0265639
total_time nearly_sorted: 0.0015197

built_in_sort:
total_time randomized: 0.681274
total_time sorted: 0.0105202
total_time inversed: 0.0164143
total_time nearly_sorted: 0.268982

built_in_stable_sort:
total_time randomized: 0.773923
total_time sorted: 0.0743105
total_time inversed: 0.156037
total_time nearly_sorted: 0.195402

merge_sort:
total_time randomized: 1.07495
total_time sorted: 0.743306
total_time inversed: 0.72761
total_time nearly_sorted: 0.994979

quick_sort:
total_time randomized: 0.738086
total_time sorted: 0.151001
total_time inversed: 0.196741
total_time nearly_sorted: 0.389106

quick_sort_fml:
total_time randomized: 0.739376
total_time sorted: 0.14978
total_time inversed: 0.195794
total_time nearly_sorted: 0.389782

heap_sort:
total_time randomized: 1.51288
total_time sorted: 0.775348
total_time inversed: 0.575192
total_time nearly_sorted: 0.766507

Из чего можно сделать вывод:
Между двумя пузырьковыми сортировками особо разницы нет, они работают примерно одинаково на любых массивах, за исключением отсортированных, тогда выигрыш оптимальной пузырьковой сортировки составляет примерно 2 раза, то есть обычная пузырьковая сортировка работает примерно в 2 раза больше по времени, поэтому более выгодно использовать именно оптимальную пузырьковую сортировку

Итак, по “квадратным” сортировкам мы можем сделать вывод:
1. На рандомных массивах быстрее всего работает сортировка вставками, медленнее всего обычная сортировка пузырьком
2. На отсортированных массивах быстрее всего работает оптимальная пузырьковая сортировка, а медленнее - сортировка выбором
3. На отсортированных и в тоже время инвертированных массивах - также оптимальная пузырьковая сортировка с незначительным отрывом от обычной пузырьковой сортировки, а самая долгая - сортировка вставками
4. На отсортированных на 90% - сортировка вставками, со значительным отрывом, примерно в 0,02 секунды, а самая медленная - обычная сортировка пузырьком

Перейдём к сортировкам за логарифм:

    Сравним для начала встроенные сортировки между собой:
Значительную разницу во времени они имеют на отсортированных массивах и на 90% массивах, там разница составляет 0,06 и 0,074 соотвественно, то есть наибольшее преимущество имеет обычная встроенная сортировка, но опять же, для слов или ещё чего-то она не так хорошо работает, следовательно, такой вывод можно применить исключительно к массивам из чисел

    Далее сравним быстрые сортировки: с выбором серединного элемента и медианы 
На самом деле время их работы практически не отличается. Выигрыш во времени, причем совсем небольшой, метод, который в качестве ведущего элемента берет медиану из трех элементов нашего массива, дает только на отсортированных на 90% массивах и случайных. На отсортированных разницы нет, что логично, так как на них, по идее, выбирать медиану из трех должно работать дольше, потому что медиану ещё посчитать надо, это дольше, чем просто взять средний - при том, что средний в этом случае и есть наилучший ведущий элемент.

Итак, по “логарифмическим” сортировкам мы можем сделать вывод:
1. На рандомных массивах быстрее всего работает обычная встроенная сортировка, медленнее всего - сортировка кучей, с отрывом в 0,4 секунды 
2. На отсортированных массивах быстрее всего работает также обычная встроенная сортировка всего за 0,0105202 секунды, а самая медленная - опять же сортировка кучей
3. На отсортированных и в тоже время инвертированных массивах - устойчивая встроенная сортировка,самая медленная - сортировка слиянием
4. На отсортированных на 90% быстрее всего устойчивая встроенная сортировка, медленнее всего - опять сортировка слиянием, почти за 1 секунду!

В заключении, можно сделать вывод, что для массивов размерности (10)^4 лучше всего использовать сортировку вставками и оптимальную сортировку пузырьком, с досрочным выходом
А для массивов размерности (10)^7 лучше всего работают встроенные сортировки и быстрая сортировка
